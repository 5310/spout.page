* Tasks

  ! Tooling
    ! Snowpack and TypeScript
      ! Find a way to import .js version sof .ts files type and all without breaking in-place compilation
      ! Find a way to build the site to a directory
        ! It should be trivial to do this for TypeScript
          @ https://github.com/microsoft/TypeScript/issues/16577
        ! And even easier for PostCSS
        ! But we need to copy over anything else as well
        As well as watch for such changes
      ! Dependency management
        Had to resort to absolute paths to make links eaier for web-components
      ! TypeScript linting and compilation
      ! TypeScript watching
        Annoyingly, `tsc -w` clears screen at every update by default, had to use `--preserveWatchOutput` to multiplex with `concurrently`
      ! Whitelist subpackages because they have to be manually whitelisted
        @ https://www.snowpack.dev/#lit-html
        We _could_ put `--include **/*.ts` on the `npm run postinstall` hook, but I've decided to pick the simpler hand-selected route instead
      ! Importing a custom-element class as an object doesn't register it, so we have to also import it as script first
    ! PostCSS and StyleLint
      ! PostCSS with plugins
        ! VSCode integration
        ! Basics such as nesting, etc
        ! Convenient custom-properties and calculations
        ! CSS4 media queries
      ! Stylelint
        ! Configuration
        ~? Fix linting on Vercel

  ? Research
    ? Learn how to do SPA routing for components
      @ https://www.pika.dev/npm/router-slot
        @ https://www.pika.dev/npm/router-slot#%E2%9E%A4-lit-element
      @ https://www.pika.dev/npm/universal-router
      @ https://www.pika.dev/npm/routerjs
    ? Learn how to handle JSON schemas with TypeScript
      @ https://spin.atomicobject.com/2018/03/26/typescript-data-validation/
      @ https://www.npmjs.com/package/typescript-json-schema
    ! Learn how to preload important bits of CSS to avoid FOUC
      `preload` is the only real solution, and Firefox doesn't support it for some reason
      aside from the service worker ofc, which is always good for subsequent loads
        ! VSCode integration
          Lints, can't fix
        ? Fix Crash inside Vercel
    ! Dynamically fitting/sizing components
      @ https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements
      @ https://developer.mozilla.org/en-US/docs/Web/API/Window/resize_event
      @ https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver
        @ https://developers.google.com/web/updates/2016/10/resizeobserver
      @ https://codepen.io/5310/pen/NWGvObZ?editors=1011
    ? PostCSS mixins using classes
    ! Find a way for the favicon to adopt the palette of the page automatically
      Can't do with without some code working on the page itself
      Preliminary code was a failure for reasons unknown
    !~ Find a way to delegate resizing of child components 
      Yeah, this isn't possible. Events in the DOM only travel upwards
      Capturing only reverses the order of the event being handled, which is by default the common-sense way: bottom to top
      The only way for a parent to communicate to a child is to proactively call a method on the child
    ? Proper scroll-snapping, that actually works
      @ https://css-tricks.com/practical-css-scroll-snapping/
      We need mobile overscroll reload to work
      We want Firefox mouse-wheel scrolling to work without getting stuck
      We want Chrome touch scrolling to work without harsh rubberbanding
      We want Chrome mouse-wheel scrolling to work without scrolling multiple breaks
    ? Learn the CSS property `contain`

  ! Development

    ! Trial Vercel-specific routing and static serving
    ! Trial web-component-driven workflow
    ! Create demo pages for each component for easier testing
    ? PRNG for random offsets
    ! Refactor component styles by specificity and saner defaults
    ? Use lit-element queries to select reused elements

    ? Debug
      ? Fix scroll-snap issues
        Scroll snaps still have a lot of gotchas:
        - On Chrome, setting :root to it breaks overscroll
        - And setting anything other than :root doesn't work
        - On Firefox setting type to proximity often breaks mouse scroll
        - On Chrome setting type to mandatory creates weird harsh snapping glitches
        For now, the "fix" is just to disable it
      ? Why the module isn't good enough to import components on /index.html
      ? Initial load failing somehow and spinning the resize handlers infinitely
      ? Why aren't @font-faces loading on the Chromebook?
      ? Somehow make smooth scrolling work with scrollwheels with mousecase

    ? Common stylesheets
      ! Responsive unit of scale
      ! Reset stylesheet
      ! Debug rendering sheet
        ! Debug coloring style
        ! Make debug color a variable
        ! Move the debug coloring variable only on the component demo HTMLs
      ! @font-faces sheet
      ! Color palette
      ? Extract base styles css
      ? Extract major type-treatments

    ? Manifest
      ! Favicons
        ! SVG Favicons
        ! fallback ICO
        ! Make favicon responsive
          @ https://css-tricks.com/svg-favicons-and-all-the-fun-things-we-can-do-with-them/
          ! color
          ~? scale
      ? Serviceworker
      ? Lighthouse audit

    ! Content
      ! placeholder
        ! book
        ! collection
      ! build process for yaml with Markdown

    ! Components

      ? app
        ? local routing
          ? parse route
          ? manage history
          ? dynamically load components
          ? solve animation hooks
          ? fallback routing with URLParameters
          ? placeholder content and transition
          ? warning about substandard browsers
          ? the footer must have a `scroll-snap-align: end` for scroll snap to work to the very end in Firefox

      ? collection
        ! create component
        ! block
          ! books with fetches
          ! listing
        ! stickify books
        ! alternate style with for index
        ! make the covers scroll on click
          don't use the entire element, as we won't be able to click behind them on other books anymore
          ` @click="${() => ((this.shadowRoot as ShadowRoot).querySelector(`.books :nth-child(${(i + 1) * 2})`) as HTMLElement).scrollIntoView({ behavior: 'smooth', block: 'center' })}"
          @ https://stackoverflow.com/a/26799885
        ! make the listings visit the book on click
          don't use the entire element, as then people will misclick on everything
        ! manage pointer-events
        ! summary mode
        ? color
        ? scroll-hint for paginated breaks
        ? linkable IDs for every section

      ? book
        ! block s-scale layout
        ! extend with m-scale
        ! extend with l-scale
        ! extend with xl-scale
        ! block with placeholder content
          ! listing
          ! blurb
          ! cover with circumcircle
          ! gallery
            ! with circumcircle
              ! templating
              ! basic styles
              ! add a drag-scroller that doesn't need a scrollbar and also works on mobile
                @ https://ilyashubin.github.io/scrollbooster/
              ! center the first image
            ! with image
        ! Tweak scroll-snap
          ! Fix medium-scale scroll-snaps from clipping
            Isn't actually a bug. What did you actually see?
            Actually, while there was no _bug_, I did make changes to make the vertical fit neater
          ! Stop small-scale scroll-snaps
            Apparently `scroll-snap-type` does not trigger snaps, `scroll-snap-align` does.
        ! Adjust typography
          !~ Try to normalize all line-heights
            Nah, this isn't worth it. It's all single-column anyway.
          ! Lean on letting the text breathe over density
          ! Tweak tags list alignment
          ! Tweak letter-spacing
          ! Settle OTF features for the base font
        ! Implement section toggling 
          ? Try not to populate sections that aren't shown at least at the start
        ! proper margins/paddings, especially for small-scale view
        !~ add resize handler
          at least for the gallery
        ! animation please
        ! manage pointer-events
        ! add full view arrow
        ~? custom events for "pointerdown" on the cover, title, arrow
        ? color
        ? scroll-hint for paginated breaks
        ? linkable IDs for every section

      ? carousel
        ! non-viewport based scaling for the gallery
          on Chrome for Android, or any similar browser, on-scroll hiding of the address bar reflows content
        ! implement mouse-wheel scrolling for the gallery
          @ https://codepen.io/5310/pen/RwWQwvv?editors=1111
          @ https://jsfiddle.net/ahpy9f66/
          ! remember to handle limits
            if `scroll-behavior: smooth` is set, scrollLeft isn't applied immediately on the DOM so we can't overflow 
              not even the following request animation frame worked
              but it would be nice to coexist with it
        ! try out hacky scrollbar hiding trick
          @ https://stackoverflow.com/a/49278385
          consider only scrolling the gallery if the mouse is central enough within it perhaps
        ! extract the gallery into its own component
          it has to have a height set
        ? implement overscroll hints
          most important on the desktop, where some people don't realize there's content to scroll horizontally
          ? consider implementing on-hover scrolling for overscroll hints
        ? linkable IDs for every showcase element

      ! circumcircle
        ! implement prototype with slot
        ! implement window resize handler
        ! debounce window resize handler
        !~ see whether a resizeObserver can be used instead
          resizeObserver doesn't seem to trigger on stretches?
          regardless, we can't go ahead yet without a lot of headache as TypeScript doesn't have types for it
        ! implement random offsets
          ! figure out how to do `offsetY`
        ! implement manual offsets
        ! for the love of Alan Turing name this element better
        ! manage pointer-events

      ? image
        ! create component
        ! integrate blurhash
        ? implement bleed
          we probably need a dummy rectangle like we have a dummy circumcircle

  ? Accessibility


* Architecture

  * Components

    - app
    
    - header
    - main
    - footer

    - about
    - book
      - content
        - cover
        - listing
          - title
          - subtitle
          - author
          - brief
        - store
        - blurb
        - gallery
      - attrs
        cover::boolean
        listing::boolean
        buy::boolean
          buy && !full -> show's just the buy button
        full::boolean
          renders the rest of the content
          includes anything specific that isn't set true
        jitter::boolean
          randomly rotates cover in a willful way
      - style
        there's no container-queries, ofc, so we have to expose different resnponsive layouts through host classes
          https://developer.mozilla.org/en-US/docs/Web/CSS/:host()
          https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#Custom_property_fallback_values 
        we're back to the problem that external stylesheet urls are relative to the document and not the custom element script
          https://lit-element.polymer-project.org/guide/styles#external-stylesheet
          instead, let's move back to an SPA architecture
            https://vercel.com/docs/configuration#project/routes
    - collection
    - 404

    - input
    - button
      - content
        - primary
          the most important value
          for smaller rupee sign etc use custom css
        - secondary
          the label of the action
      - styles
        - clear
        - solid

    - circle-block
      does circle-fitting with images
      does random rotation
        preferably with hashes of the image srcset[0]
        if we're going to rotate something randomly, it's going to look wabisabi af
          ±ceil(random()*5)±(random()**2*7)
      @ https://dev.to/tchaflich/a-width-responsive-perfect-square-in-pure-css-3dao
      - attr
        - data
        - fit
          sizes the cover to the image inside rather than the square with the circle
    - image
      manages src-set
        feel free to use <img>
      enforces aspect-ratio
      renders blurhash
      will eventually support bleeds
    - carousel
    - logo
      inline box
      - attr
        if either mark or type is set, then only the set one will be rendered
        - mark
        - type
      to use the text properties of the inline host, this element can't be shadow-dommed
        https://stackoverflow.com/questions/55126694/how-to-create-litelement-without-shadow-dom
    - motif
    
  * Types

    - Content
    
      - About
        ? Not quite sure if this should be have a content file/type at all
          Surely this wouldnwon't be edited very often, if at all
          Which means writing this in HTML/CSS would offer more one-off flourish

      - Book
        - cover :: Image
        - title :: Markdown.Span
        - subtitle? :: Markdown.Span
        - author? :: Markdown.Span
        - brief :: Markdown.Span
        - price :: Number
        - discount :: Number
        - size :: { width :: Number, height :: Number, pages :: Number }
        - tags :: String[]
        - blurb :: Markdown.Block
        - gallery :: Image[]

      - Collection
        - title :: Markdown.Span
        - brief :: Markdown.Span
        - books :: Book[]
        - blurb :: Markdown.Block

    - Image
      - srcset :: SrcSet
      - aspectratio :: Number
      - blurhash? :: String
      - bleed? :: { top :: Number, left :: Number, bottom :: Number, right :: Number }

    - SrcSet
      @ https://stackoverflow.com/questions/49910889/typescript-array-with-minimum-length

    - Markdown
      Some of the copy fields shouldn't accept more than a span of text
        ? Not sure how I'd represent this other than just aliases
      - Span
      - Block


  * Routing
    The filesystem takes precedence
    - /api
      - /api/books
        List of all the books
        Will be unused for now
        - /api/books/:book
          Given the book listing's ID, return its content _as JSON_
          Should also return a sensible not-gound error
      - /api/collections
        - /api/collections/:collection
    - /about
    - /books
      should redirect to `/collections` for now
      - /books/:book
        will display that specific book
    - /collections
      - /collections/:collection


* Structure
  - README.md
  - notes.scg.tex
    you're here!
  - *
    config files
  - content/
    Actual content and associated assets
      They're written in YAML for convenience, but will be served as JSON through
    - about/
      - index.yaml
      - *
    - books/
      - */
        - index.yaml
        - *
    - collections/
      - */
        - index.yaml
        - *
  -? api/
    ? still considering whether to use Vercel's serverless functions or be as portable as possible and parse it clientside
    - books/
      index.ts
      [book].ts
    - collections/
      index.ts
      [collection].ts
  - src/
    - components/
      - */
        - index.ts
        - index.pcss
        - *
    - lib/
      - *
    - manifest/
      for all the app manifest files and icons, etc
    - web_modules/
      maintained by Snowpack, gitIgnored
    - index.html
    - index.pcss
    - index.ts
    - reset.pcss
    - scale.pcss
    - debug.pcss
    - types.ts
  - node_modules/
  - scratch/


* Notes

  * Lit-Element
    @ https://lit-element.polymer-project.org/guide/properties
    @ https://lit-html.polymer-project.org/guide/template-reference

  * CSS
    @ https://css-tricks.com/snippets/css/complete-guide-grid/
    @ https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap
    @ http://open-type.surge.sh/
    @ https://fontdrop.info/

  * Web Animation API
    @ https://developers.google.com/web/updates/2015/10/web-animations-resources
    @ https://developer.mozilla.org/en-US/docs/Web/API/Element/animate
    @ https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats
    @ https://codepen.io/5310/pen/zYvpwpG
  
  * Content format
    Our data should be flat files
      That is, all books under `books/` as individual files, all collections under `collections`, etc
      Given Titun is expected to edit them, we can't go technical
      We've picked YAML with Markdown content as it's easier to edit by hand
      Textual copy will be Markdown
    These flat files will be served over an API to the app
      While decoupled this way, we still would colocate the content with the app for now
    Eventually we might move to one of the many serverless CMS tools
      They would still likely edit the content directly in the repo

  * Vercel troubles
    Vercel 2 is supposedly "zero configuration"
      What this actually means is that there are a set of extremely basic defaults that it uses to serve static or serverless stuff
        @ https://vercel.com/blog/zero-config
        So basic, that they also have settings in the dashboard to override the build command and directory
          ! I have these set
      This is apparently better than having a `now.json` (soon to be `vercel.json`)
    ! Yet I need `now.json` anyway, as there's no way to do routes without one
      @ https://github.com/zeit/now/discussions/4052
    ! The real problem is that if I have a `now.json` I can't also define the build in there because then Vercel will try to push the downloaded `node_modules` to the deployment and hit the max files limit
      @ https://vercel.com/docs/v2/platform/limits#files
      This isn't a problem if I just don't use `static-build` in the json
        You'd think `.nowignore` would fix this shit, but it has no effect in this particular case
          @ https://vercel.com/guides/prevent-uploading-sourcepaths-with-nowignore
          As in, even with `node_modules` ignored, it still hits the limit
        It's retroactively undocumented anyway
          and the zero config pipeline can build it without any build instructions
      But doing so means `vercel dev` will no longer work
        Because right now, the dumb thing doesn't pull the deployment path from the dashboard despite needing to be linked to a deployment to run
          @ https://github.com/zeit/now/issues/3767#issuecomment-611074321
    ! So right now, I have no choice but to wait for `now dev` to get fixed and use preview deployments to develop, and keep using `now.json`
      My current config only has the routes, and no build configs; they're pulled from the dashboard
      And to preview a deployment, we can always just push to GitHub repo and trigger one automatically or run `vercel` to do a deploy of the local repo
        GitHub integration only triggers on commit
          @ https://spoutpage.scio.now.sh/
          @ https://spoutpage-git-dev20.scio.now.sh/
          It is nice for when we integrate a CMS
          But it's too annoying to trigger while developing
        `vercel` also builds on preview without any instructions in the json, but at least we don't have to push
